#!/usr/bin/env sh

set -eu

# -------------------------------
# Defaults (overridable by flags)
# -------------------------------
BUILD_TYPE=Release
SANITIZER=""
CXX=${CXX:-g++}
CC=${CC:-cc}
STD=c++23
EXTRA_CXXFLAGS=""
EXTRA_LDFLAGS=""
PREFIX="/usr/local"

USER_SET_SANITIZER=0
USER_SET_EXTRA_CXXFLAGS=0

usage() {
  cat <<EOF
Usage: ./configure [options]

Options:
  --build-type=Debug|Release        (default: Release)
  --enable-sanitizer[=address]      Enable a sanitizer (address|undefined|leak|thread)
  --disable-sanitizer               Disable sanitizers
  --cxx=PATH                        Choose the C++ compiler (default: \$CXX or g++)
  --cc=PATH                         Choose the C compiler for feature tests (default: \$CC or cc)
  --prefix=PATH                     Installation prefix (default: /usr/local)
  --extra-cxxflags="..."            Extra CXX flags (appended)
  --extra-ldflags="..."             Extra LD flags (appended)
  -h, --help                        Show this help
EOF
}

# -------------------------------
# Parse args
# -------------------------------
for arg in "$@"; do
  case "$arg" in
    --build-type=*) BUILD_TYPE="${arg#*=}";;
    --enable-sanitizer) SANITIZER="address"; USER_SET_SANITIZER=1;;
    --enable-sanitizer=*) SANITIZER="${arg#*=}"; USER_SET_SANITIZER=1;;
    --disable-sanitizer) SANITIZER=""; USER_SET_SANITIZER=1;;
    --cxx=*) CXX="${arg#*=}";;
    --cc=*) CC="${arg#*=}";;
    --prefix=*) PREFIX="${arg#*=}";;
    --extra-cxxflags=*) EXTRA_CXXFLAGS="${arg#*=}"; USER_SET_EXTRA_CXXFLAGS=1;;
    --extra-ldflags=*) EXTRA_LDFLAGS="${arg#*=}";;
    -h|--help) usage; exit 0;;
    *) echo "Unknown option: $arg"; usage; exit 1;;
  esac
done

case "$BUILD_TYPE" in
  Debug)   OPTFLAGS="-g -O0" ;;
  Release) OPTFLAGS="-O2 -DNDEBUG" ;;
  *) echo "Invalid --build-type: $BUILD_TYPE (use Debug or Release)"; exit 1 ;;
esac

# If user asked for Debug and didn't explicitly set sanitizer, default to ASan.
if [ "$BUILD_TYPE" = "Debug" ] && [ "$USER_SET_SANITIZER" -eq 0 ]; then
  SANITIZER="address"
fi
# If user asked for Debug and didn't explicitly set extra cxxflags, add frame pointers.
if [ "$BUILD_TYPE" = "Debug" ] && [ "$USER_SET_EXTRA_CXXFLAGS" -eq 0 ]; then
  EXTRA_CXXFLAGS="$EXTRA_CXXFLAGS -fno-omit-frame-pointer"
fi

# -------------------------------
# pkg-config deps (exclude libtar)
# -------------------------------
PKGS="
  libxml-2.0
  libcurl
  sqlite3
  x11
  openssl
  libmagic
  yara
"

missing=""
for p in $PKGS; do
  if ! pkg-config --exists "$p"; then
    missing="$missing $p"
  fi
done

if [ -n "$missing" ]; then
  echo "ERROR: Missing pkg-config packages:$missing" >&2
  echo "Install the development packages and retry." >&2
  exit 1
fi

PKG_CFLAGS="$(pkg-config --cflags $PKGS)"
PKG_LIBS="$(pkg-config --libs $PKGS)"

# -------------------------------
# Sanitizers
# -------------------------------
SAN_FLAG=""
if [ -n "$SANITIZER" ]; then
  case "$SANITIZER" in
    address|undefined|leak|thread) SAN_FLAG="-fsanitize=$SANITIZER" ;;
    *) echo "Unknown sanitizer: $SANITIZER"; exit 1 ;;
  esac
fi

# -------------------------------
# Manual libtar detection
# -------------------------------
cleanup_conftest() { rm -f .conftest .conftest.c .conftest.o 2>/dev/null || true; }
cleanup_conftest

cat > .conftest.c <<'EOF'
#include <libtar.h>
int main(void) { TAR *t = 0; (void)t; return 0; }
EOF

libtar_ok=0
if "$CC" -o .conftest .conftest.c $PKG_CFLAGS -ltar >/dev/null 2>&1; then
  libtar_ok=1
else
  if "$CXX" -o .conftest .conftest.c $PKG_CFLAGS -ltar >/dev/null 2>&1; then
    libtar_ok=1
  fi
fi

cleanup_conftest

if [ "$libtar_ok" -ne 1 ]; then
  echo "ERROR: libtar headers or library not found." >&2
  echo "On Ubuntu/Debian: sudo apt install libtar-dev" >&2
  exit 1
fi

PKG_LIBS="$PKG_LIBS -ltar"

# -------------------------------
# Emit config.mk
# -------------------------------
cat > config.mk <<EOF
# Auto-generated by ./configure
PREFIX := $PREFIX
CXX := $CXX
CXXSTD := --std=$STD
BUILD_TYPE := $BUILD_TYPE

PKG_CFLAGS := $PKG_CFLAGS
PKG_LIBS := $PKG_LIBS

SANITIZER := $SAN_FLAG

# Base flags
BASE_CXXFLAGS := -w -fdiagnostics-color=always -MMD -MP
OPTFLAGS := $OPTFLAGS

# Final flags
CXXFLAGS := \$(OPTFLAGS) \$(BASE_CXXFLAGS) \$(CXXSTD) \$(PKG_CFLAGS) \$(SANITIZER) $EXTRA_CXXFLAGS
LDFLAGS  := \$(PKG_LIBS) \$(SANITIZER) $EXTRA_LDFLAGS
EOF

# -------------------------------
# Summary
# -------------------------------
echo "Wrote config.mk"
echo "Summary:"
echo "  CXX           = $CXX"
echo "  CC            = $CC"
echo "  BUILD_TYPE    = $BUILD_TYPE"
echo "  SANITIZER     = ${SANITIZER:-none}"
echo "  PREFIX        = $PREFIX"
echo "  Using pkg-config for: $PKGS"
echo "  libtar        = detected (linked with -ltar)"

